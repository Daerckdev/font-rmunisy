#!/usr/bin/python3

import fontforge
from pathlib import Path
from sys import exit as abort

class RMUnisy():
    def __init__(self, fonts: list, unicode_data, output_dir: Path) -> None:
        # check arguments
        for font in fonts:
            self.__isfile(font)
        self.__isdir(output_dir)

        # init object
        self.unicode = self.get_unicode(unicode_data)
        self.fonts = fonts
        self.output_dir = output_dir

    def __isfile(self, path: Path) -> bool:
        if path.is_file():
            return True
        abort(f"{self.__class__.__name__}: {path} is not a file.")

    def __isdir(self, path: Path) -> bool:
        if path.is_dir():
            return True
        abort(f"{self.__class__.__name__}: {path} is not a directory.")

    def get_unicode(self, data) -> list:
        if isinstance(data, str):
            if data == "":
                abort(f"{self.__class__.__name__}: There is no unicode characters to delete")
            raw = data.split(" ")
        else:
            self.__isfile(data)
            with open(data, "r") as file:
                raw = file.read().strip().split("\n")
        unicodes = [int(u) for u in raw]
        return unicodes

    def patch(self, name_mark: str="") -> bool:
        for path in self.fonts:
            font = fontforge.open(str(path))
            for unicode in self.unicode:
                font.selection.select(("unicode", None), unicode)
                font.clear()
                print(unicode, "removed")
            font.generate(f"{self.output_dir}/{path.stem}{name_mark}{path.suffix}")
            font.close()
        return True


def main() -> bool:
    # Resolve arguments
    parser = ArgumentParser(description="Delete unicode characters from a font using FontForge")
    parser.add_argument('fonts_path', type=Path, nargs="+", help="The path to the fonts to patch")
    parser.add_argument('-if', dest="unicode", type=Path, help="The path of the file contain the unicodes to delete")
    parser.add_argument('-i', dest="unicode", type=str, default="", help="A string with the unicode characters to remove (separated by a space)")
    parser.add_argument('-o', dest="output_dir", required=False, type=Path, default=Path("build"), help="Output Directory (default: ./build)")
    parser.add_argument('--mark=', dest="mark", required=False, type=str, default="", help="String to add to the patched file's name")
    arguments_manager = parser.parse_args()

    program = RMUnisy(fonts=arguments_manager.fonts_path, unicode_data=arguments_manager.unicode, output_dir=arguments_manager.output_dir)
    program.patch(arguments_manager.mark)

    return True

if __name__ == "__main__":
    from argparse import ArgumentParser
    main()

